UI:
 ☐ Maintain partial discoloration for online icon based on "stall count"
   e.g. second stall online icon is 2/3 colored, third stall icon is 1/3 colored, then offline
   first stall is ignored as possibly temporary glitch
 ✔ Ubuntu 32/64 bit binaries repo for Matti. @done (13-11-11 19:00)
    ✔ ubuntu 64 bits binaries on github, make a .deb? @done (12-12-09 16:26)
 ☐ Deploy nshd to motoko?
 ☐ how to perform search? an ESC-interface sounds intriguing
 ☐ Going Online->Offline is not tracked properly, should update when failing to connect or receiving disconnect signal.
    Looks like presence service stops functioning once there are more services enabled. Looks like the last service always wins - bug in protocol?
 ☐ Add higher-priority RTCP stream in opus-streaming.
   add to audio_service
   rename audio_service to voice_service... like in netsteria
 ✔ Build static regserver for linux. @done (13-11-04 01:02)

 ✔ Add PeerPicker to select an EID from regserver before attempting connection. @done (13-11-23 23:25)
   Should simplify work with opus-streaming etc.
   see playground/PeerPicker

Comms (voice/video/chat):
 ✔ opus does not build on linux - some configs missing? @done (13-11-04 01:02)
 ☐ Sync history between instances
     Message has a timestamp, originator and the target chat. Synchronize based on that. Chat should pull
     non-existant entries once activated. How to track joins/leaves (+ history available to new joiners)?
     (unread, originator, timestamp, target, msg_hash) - tuple for syncing messages.
     Unread is synced, for example if the chat was already read on a device, then unread=0 may be synced.
     (originator_user, originator_eid, originator_timestamp) - to track source of the message.
     (rx_timestamp) - to measure interdevice synchronization time.
     (chat_id) - a hashed concatenation of originator and receiver ids plus, perhaps, some nonce.
 ☐ Draw possible chat synchronization graph ideas between Alice's and Bob's personal cluser devices.
 ☐ Chat documentation on https://github.com/berkus/mettanode/blob/develop/ui/doc/chat_and_messaging.md
 ☐ Group chat.
 ☐ Chat join urls like metta:chat?authblob
 ☐ Event bells/notifications: friend online, chat/talk started, etc.
 ☐ Chat happens in chat room.
 ☐ Rooms may be arbitrarily nested forming chat labyrinth.
 ☐ Screencasting client
   ☐ Capture screen and encode to video stream? libvpx or something like that. Run experiments.
    ☐ Or, subtract one screen from another and lossless-encode the difference.

Storage (grabber/file sync/versioning):
 ☐ Bandwidth indicator during downloads - see how win8 copy dialog looks like.
 ☐ Show file transfer progress on both sending and receiving sides. Also inside chat.
 ☐ Make ongoing downloads automatically persist across restarts
 ✔ Watch Files directory for new files and file changes (QFileSystemWatcher) @done (12-11-05 23:49)
 ☐ Initiate file resync operation when change is detected.
     Should work pretty much like file transfer, just the file save locations are predefined.
     Different changes cause different synchronization commands to be sent.
     E.g. moving a file issues RENAME, while deleting it issues REMOVE and changing it issues UPDATE_SYNC.
     What to do with conflicting changes? One node sends rename, one remove and one modify?
     Something like full-fledged git might be needed. At the very least a key-value like store, that resolves modifications using full file path 
     as just another attribute (change in FILE_PATH attribute might cause a rename, for example).

     Try git model approach - files are in trees, trees are hashed and upon change a Change of tree is recorded with the link to previous (parent)
     tree(s). Files are like git blobs but assembled of multiple chunks.

* Synchronized objects - some blobs with associated metadata. Blob structure is not defined and is not interesting to the synchronization layer. Metadata is a key-value store, with fine-grained synchronization.
* Grab files from a specified directory a-la Dropbox.
* If metadata points to a blob not in the local store, system tries to find the blob on other devices and synchronise it.
* For the first version storage area can be limited to devices within the cluster. in general, blobs could be redundantly and securely stored on any nodes across the network.
* monitor Files folder for stuff to sync.
* metadata assignments - how? extract as much as possible automatically.
 ☐ synchronize arbitrary file chunks and their metadata between devices in the cluster (hardcoded for start).
 ☐ sync git-like file trees and chunk blobs
   ☐ split a file into a number of fixed-size blocks (plus a smaller trailing block if necessary)
   ☐ record each block hash into a file record 
   ☐ record metadata block(s), HMAC it/them - should it be fixed size or some more manageable chunks?
   ☐ add metadata block(s) hash(es) into a file record and then HMAC the entire record
   ☐ record each file record into a tree object and HMAC it
   ☐ go up the tree adding subtrees as records, just like git trees, HMAC each tree
   ☐ now since the tree has changed, record a Change, link it to parent Change, sign and HMAC it. - tag HEAD onto the latest change now
   ☐ this is where tree sync will start - other nodes compare their own HEAD changes with this node and perform a sync-fetch to align histories.
      in general case sync doesn't have to bring in all changes of the history, e.g. each Change object lineage may be synced, but for the file blocks
      you only need to know the actual contents of the latest version and where to find the earlier version in case user takes a peek.

  grabber prototype:
    ☐ Simple feature - grab YouTube "Favourites video" playlist, download all videos from there and store them.
        https://developers.google.com/youtube/v3/ - api documentation
        Needs OAuth to authenticate the user before grabbing his favourites.
          - We need certain auth creds store to keep things for our app.
             - Does Keychain allow storing this per-app? Check Apple docs.
             - What could be used on other systems?
    ☐ If user favourites is public, no need to auth?
    ☐ Do that periodically to fetch new videos.
    ☐ Use https://github.com/google/google-api-cpp-client/ - CRAP!
    ☐ This is against the TOS!

Personal Cluster Management:
 ☐ should be possible to add a device to personal device "cluster", thus allowing it to search the entire cluster and modify (optionally) data in the cluster.
 ☐ should be possible to remove a device from cluster, there might be no access to this device anymore (e.g. lost phone)
 ☐ devices in the cluster always keep track of status for other devices in the cluster and synchronize with them often.
 ☐ search between devices is performed in metadata index, which devices try to synchronise with priority to other objects.

Routing:
 ✔ Port routing using rendezvous server from Netsteria. @done (13-10-24 22:07)
   ✔ Needs bugfixes and polishing up. @done (13-11-21 23:35)
   ✔ Do the regserver_client part. @done (13-10-27 12:56)
 ☐ Connect devices to each other, overlay routing lets device find another device and set up connection.
 ☐ LAN/Bonjour node discovery.
 ☐ Regserver deregistration on logout is added - should notify active connections somehow too?

 ☐ BUG: Crashes on access to client_profile.endpoints() if no endpoints was provided by the client.
 ✔ Regserver crash on client re-register (see collect.logs/linux64-reregister-fault.txt) @done (13-11-21 23:35)

 ☐ Regserver uses unencrypted network traffic.
   ☐ a) switch regserver to use regular ssu streams
   ☐ b) move regserver to a regular ssu protocol
   ☐ c) run regserver inside host on the same port
   ☐ d) regserver shall be integral part of each participating node
   ☐ e) regserver will become a part of p2p directory when DHT is implemented

Structured Streams:
 
 ☐ BUG: Assertion failed: (transmit_sids_.empty()), function detach_all, file ../ssu/lib/stream_channel.cpp, line 195.
   happens after a while on opus-streaming receiving side

zlib_armor
 ☐ using boost.iostreams?

 negotiate zlib or bzip2 compression (gzip compression is for files, using same zlib)

encryption/compression negotiation

  vector<string> s = {"saes128ctr", "sxsalsa20", "ahmacsha512256", "czlib"};

 ☐ saes256ctr  = 's'ymmetric key encryption
 ☐ czlib                = 'c'ompression
 ☐ hmacsha512256        = 'a'uthentication

  can be multiple keys with all prefixes, in order of priority, other side picks best supported and responds.
  symmetric encryption and authentication are mandatory, compression is optional.

  initiator may skip compression request, for example for realtime audio/video streams.

public API

 ☐ how to specify required armors? probably just a no_compress flag from initiator API.
   or a no_compress, zlib_compress, bzip2_compress options - this limits the API

Later
 ☐ add support for nacl - anticipating openssl primitives support in nacl soon
 ✔ FindNaCl.cmake? @done (13-10-27 12:42)
 ☐ Drop OPENSSL_LIBRARIES - once nacl supports whatever needed.
 ☐ Change krypto to use cryptobox_*

 ☐ unit tests, unit tests, unit tests
 ☐ cover KeyInitiator and KeyResponder with unit tests (need to fake randomness bits somehow?)
 ☐ run audio streaming test in both the simulation environment (file-to-file using arbitrary loss percentage) and real VoiceService environment (file-to-hw output using local network connection).
 ☐ run opus-streaming test in the simulation environment (file-to-file using arbitrary loss percentage)

Support:
  ☐ Get rid of plist
    ☐ Implement flurrying boost::any instead.
      ☐ Need a method to write any and a method to read any, that's it, really.
 ☐ Un/Flurry map<string, boost::any> for settings storage.

Most immediate usability necessities:
 ☐ write SST spec as an RFC draft - complete unfinished SST spec in form of RFC document
   ☐ assign IETF RFC number, see http://www.ietf.org/id-info/
 ☐ finish implementing wire protocol to specs.  Specifically:
   ☐ receiver-directed flow control
   ☐ datagram reassembly
   ☐ stream attachment and detachment
   ☐ proper stream ID allocation & assignment
   ☐ implement and use sequencing barriers properly (spec 3.4.1)
   ☐ txReset
 ☐ specify and fix negotiation protocol format

 ☐ give priority to local-network Endpoint addresses first (need to match network against available interfaces' IPs)
 ✔ possible DOS if localhost is specified in Endpoints? yep, tested and true, fix. @done (13-11-04 01:14)
   ☐ first, never ever include loopback addresses in endpoints list
   ✔ second, if ever encountered, just ignore those @done (13-11-04 01:14)

  Possibly PID (Proportional-Integral-Differential) flow control.

sst/shell:
 ☐ unlock console fds once the shell connection ceases
 ☐ after some waiting time the streams disconnect and mix up

sst/test/regress Regression tests needed:

substreams
 ☐ create a lot of substreams rapidly, hold onto them, use them once in a while
 ☐ create and destroy a lot of substreams in rapid succession
 ☐ rapidly create a deep hierarchy of nested substreams

datagrams
 ☐ send a stream of datagrams of widely varying size
 ☐ send a mix of datagram substreams and real two-way substreams

flow control
 ☐ flow control for byte streams
 ☐ receive window borrowing
 ☐ receive window borrowing for datagram substreams
 ☐ inherited versus independent receive windows

Most immediate usability necessities:
 ☐ Some documentation, both user and technical
   ☐ blog post on using libssu streams - in progress
 ☐ Automatic launching on host OS login
 ☐ Public/friends-only choices on profile items
 ☐ Profile picture
 ☐ Log window for log display in real-time.
 ☐ Registration server logging to file.
 ☐ Registration server proper handling of registrations from the same LAN.
    (second client to register disconnects first). The problem appears to be more serious and is related to insufficient NAT handling.

NAT and UPnP:
  ✔ hmm, even with UPnP succeeding the pings never get back?? wtf @done (12-12-07 13:23)
    ✔ can it be motoko traffic filtered? try with a different server, e.g. amazon t1.micro instance. @done (12-12-07 13:23)
       and it was motoko firewalls indeed, 
       ✔ call infonet about it @done (13-03-11 23:57)
           infonet claim there is no UDP filtering whatsoever, can it be motoko's local portsentry or sth like that? check the services/ipfw settings.
  ☐ Integrate UPnP into SST::Host.
 ✔ Download router XML file using QNetworkAccessManager/QNetworkReply @done (12-11-18 16:24)
 ✔ Punching TCP holes via UPnP works, but UDP doesn't (apparently, Skype can do it!) - figure out why, find a workaround. @done (12-11-24 10:45)
   ✔ miniupnpc could punch a hole when specifying a lease duration @done (12-11-23 19:24)
   ✔ try TCP before UDP (cplx @easy) - didn't help @done (12-11-24 10:45)
   ✔ try with lease duration using upnp lib - this worked! @done (12-11-24 10:44)
   ✔ wireshark requests from utorrent/skype - was not necessary @done (12-11-24 10:46)
 ☐ Assign a new Endpoint with public IP and UPnP-assigned port number.
   ☐ Use it to register on regserver as primary.
 ☐ Integrate hole punching machinery with SST::Host.
 ☐ UPnP event variables that need to be checked:
     NATEnabled - if not, portmapping setting will fail.
     ConnectionStatus - if not connected, setting forwarding is useless.
     PortMappingNumberOfEntries - if changed, might need to re-read the actual mapping information.
     PortMappingLeaseDuration - is decremented and needs to be checked regularly, some seconds before the lease time out the lease must be extended for our port forwardings.
     Therefore, we need to maintain the status of UPnPRouter endpoint.

Metta:
  Kuso new internet:
    "Kami" (paper) origami.
    Origami - аллегория восприятия. Что мы увидели и почувствовали, без навешивания ярлыков.
    Задача в том чтобы легче получать и доставлять впечатления.
    
    Just-in-time концептуализация.

    UI: "Advertise my membership in room [#osdev] to [Nobody [v]"
    -Wthread-safety
